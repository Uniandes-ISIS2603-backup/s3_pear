
{
    "swagger": "2.0",
    "info": {
        "version": "1.0",
        "title": "pear-web"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "schemes": [
        "http"
    ],
    "paths": {
        "/calificaciones": {
            "get": {
                "description": "<h1>GET /api/calificaciones : Obtener todas las calificaciones.</h1>\n \n <pre>Busca y devuelve todas las calificaciones que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todas las calificaciones de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CalificacionDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/calificaciones : crear una calificacion.</h1>\n \n <pre>Cuerpo de petición: JSON {@link CalificaciobDitaillDTO}.\n \n Crea una nueva calificacion con la informacion que se recibe en el cuerpo \n de la petición y se regresa un objeto identico.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva calificacion .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe la calificacion.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CalificacionDetailDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CalificacionDetailDTO"
                        }
                    }
                }
            }
        },
        "/calificaciones/{id}": {
            "get": {
                "description": "<h1>GET /api/calificaciones/{id} : Obtener queja y reclamo por id.</h1>\n \n <pre>Busca la calificacion con el id asociado recibido en la URL y la devuelve.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la calificacion correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una calificacion con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la queja y reclamo que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CalificacionDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/calificaciones/{id} : Actualizar calificacion con el id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link CalificacionDetailDTO}.\n \n Actualiza la calificacion con el id recibido en la URL con la informacion que se recibe en el cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la calificacion con el id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una queja con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la calificacion que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CalificacionDetailDTO"
                        },
                        "description": "{@link CalificacionDetailDTO} La queja que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CalificacionDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/calificacion/{id} : Borrar calificacion por id.</h1>\n \n <pre>Borra la calificacion con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina la calificacion correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una calificacion con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la calificacion que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/casos": {
            "get": {
                "description": "<h1>GET /api/casos : Obtener todos los casos</h1>\n \n <pre>Busca y devuelve todos los casos que existen en la\n aplicación.\n \n Códigos de respuesta:<br>\n <code style=\"color:mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todos los casos registrados.</code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CasoExitoDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST TODOLaRuta : Crear un caso exitoso.</h1>\n \n <pre>Cuerpo de petición: JSON {@link CasoExitoDetailDTO}.\n \n Crea un nuevo caso exitoso con la información que se recibe en el cuerpo\n de la petición y se devuelve un objeto idéntico con un id auto-generado\n por la base de datos.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó el nuevo caso.\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precondition Failed: Este caso ya fue registrado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CasoExitoDetailDTO"
                        },
                        "description": "{@link CasoExitoDetailDTO} - El caso que se \n quiere registrar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CasoExitoDetailDTO"
                        }
                    }
                }
            }
        },
        "/casos/{id}": {
            "get": {
                "description": "<h1>GET /api/casos/{id} _ Obtener un caso por id.</h1>\n \n <pre>Busca el caso con el id asociado recibido en la URL y lo\n devuelve.\n \n Códigos de respuesta:<br>\n <code style=\"color:mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve el caso correspondiente al id.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador del caso que se está buscando. Este debe ser una\n cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CasoExitoDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/casos/{id} : Actualizar caso con el id dado.</h1>\n <pre> Cuerpo de petición: JSON {@link CasoExitoDetailDTO}.\n \n Actualiza el caso con el id recibido en la URL con la información que se\n recibe en el cuerpo de la petición.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza el caso con el id dado con la información enviada como\n parámetro. Devuelve un objeto idéntico.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe un casocon el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador del caso que se desea actualizar. Este debe ser\n una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CasoExitoDetailDTO"
                        },
                        "description": "{@link CasoExitoDetailDTO} El caso que se desea actualizar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CasoExitoDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/caso/{id} : Borrar caso por id. </h1>\n \n <pre>Borra el caso con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina el caso con el id dado. </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe un caso con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador del caso que se desea borrar. Este debe ser una\n cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/cities": {
            "get": {
                "description": "<h1>GET /api/cities : Obtener todas las ciudades.</h1>\n \n <pre>Busca y devuelve todas las ciudades que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todas las ciudades de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CityDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/cities : Crear una ciudad.</h1>\n \n <pre>Cuerpo de petición: JSON {@link CityDetailDTO}.\n \n Crea una nueva ciudad con la informacion que se recibe en el cuerpo \n de la petición y se regresa un objeto identico con un id auto-generado \n por la base de datos.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva ciudad .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe la ciudad.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CityDetailDTO"
                        },
                        "description": "{@link CityDetailDTO} - La ciudad que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CityDetailDTO"
                        }
                    }
                }
            }
        },
        "/cities/{id}": {
            "get": {
                "description": "<h1>GET /api/cities/{id} : Obtener ciudad por id.</h1>\n \n <pre>Busca la ciudad con el id asociado recibido en la URL y la devuelve.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la ciudad correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una ciudad con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la ciudad que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CityDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/cities/{id} : Actualizar ciudad con el id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link CityDetailDTO}.\n \n Actualiza la ciudad con el id recibido en la URL con la informacion que se recibe en el cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la ciudad con el id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una ciudad con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la ciudad que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CityDetailDTO"
                        },
                        "description": "{@link CityDetailDTO} La ciudad que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CityDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/cities/{id} : Borrar ciudad por id.</h1>\n \n <pre>Borra la ciudad con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina la ciudad correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una ciudad con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la ciudad que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/cocinas": {
            "get": {
                "description": "<h1>GET /api/cocinas : Obtener todas las cocinas.</h1>\n \n <pre>Busca y devuelve todas las cocinas que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todas las ciudades de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CocinaDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/cocinas : Crear una cocina.</h1>\n \n <pre>Cuerpo de petición: JSON {@link DietaTipoDetailDTO}.\n \n Crea una nueva cocina con la informacion que se recibe en el cuerpo \n de la petición y se regresa un objeto identico con un id auto-generado \n por la base de datos.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva cocina .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe la cocina.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CocinaDetailDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CocinaDetailDTO"
                        }
                    }
                }
            }
        },
        "/cocinas/{id}": {
            "get": {
                "description": "<h1>GET /api/cocinas/{id} : Obtener cocina por id.</h1>\n \n <pre>Busca la cocina con el id asociado recibido en la URL y la devuelve.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la cocina correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una cocina con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la cocina que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CocinaDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/cocinas/{id} : Actualizar cocinas con el id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link CityDetailDTO}.\n \n Actualiza la cocina con el id recibido en la URL con la informacion que se recibe en el cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la cocina con el id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una cocina con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la cocina que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CocinaDetailDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CocinaDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/cocinas/{id} : Borrar cocina por id.</h1>\n \n <pre>Borra la cocina con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina la cocina correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una cocina con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la cocina que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/comidas": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cuentaCobro/pago": {
            "get": {
                "description": "<h1>GET /api/cuentaDeCobro/pagos : Obtener todos los pagos.</h1>\n \n <pre>Busca y devulave todas las pagos que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devulave todas las pagos de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PagoDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/cuentaCobro/pago : Crea un pagoh1>\n \n <pre>Cuerpo de petición: JSON {@link PagoDetailDTO}.\n \n Crea una nueva pago con la informacion que se recibe en la cuerpo \n de la petición y se regresa un objeto identico con un id auto-generado \n por la base de datos.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva pago .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe la pago.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PagoDetailDTO"
                        },
                        "description": "{@link pagoCobroDetailDTO} - el pago que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/PagoDetailDTO"
                        }
                    }
                }
            }
        },
        "/cuentaCobro/pago/medioPago": {
            "get": {
                "description": "<h1>GET /api/pagos : Obtener todas los medios de pago.</h1>\n \n <pre>Busca y devuelve todos los medios de pago que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todos los medios de pago de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MedioPagoDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/cuentaCobro/pago/medioPago : Crea una pago.</h1>\n \n <pre>Cuerpo de petición: JSON {@link MedioPagoDetailDTO}.\n \n Crea un nuevo medio de pago con la informacion que se recibe en la cuerpo \n de la petición y se regresa un objeto identico con un id auto-generado \n por la base de datos.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva pago .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe el medio de pago.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MedioPagoDTO"
                        },
                        "description": "{@link MedioPagoDetailDTO} - el medio de pago que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/MedioPagoDTO"
                        }
                    }
                }
            }
        },
        "/cuentaCobro/pago/medioPago/{id}": {
            "get": {
                "description": "<h1>GET /api/pagos/{id} : Obtener pago por id.</h1>\n \n <pre>Busca la pago con la id asociado recibido en la URL y la devulave.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devulave la pago correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una pago con la id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la pago que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/MedioPagoDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/medioPago/{id} : Actualizar el medio de pago con la id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link CityDetailDTO}.\n \n Actualiza la pago con la id recibido en la URL con la informacion que se recibe en la cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza el medio de pago con la id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una pago con la id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la pago que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MedioPagoDTO"
                        },
                        "description": "{@link MedioPagoDetailDTO} el medio de pago que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/MedioPagoDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/pagos/{id} : Borrar pago por id.</h1>\n \n <pre>Borra la pago con la id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK elimina  pago correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe un medio de pago con la id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador del medio de pago que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/cuentaCobro/pago/{id}": {
            "get": {
                "description": "<h1>GET /api/pagos/{id} : Obtener pago por id.</h1>\n \n <pre>Busca el pago con la id asociado recibido en la URL y la devulave.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la pago correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una pago con la id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la pago que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/PagoDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/cities/{id} : Actualizar pago con la id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link PagoDetailDTO}.\n \n Actualiza el pago con la id recibido en la URL con la informacion que se recibe en la cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la pago con la id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe un pago con la id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la pago que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PagoDetailDTO"
                        },
                        "description": "{@link PagoDetailDTO} la pago que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/PagoDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DlaETE /api/pagos/{id} : Borrar pago por id.</h1>\n \n <pre>Borra el pago con la id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK laimina el pago correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe un pago con la id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la pago que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/cuentascobro": {
            "get": {
                "description": "<h1>GET /api/cuentas : Obtener todas las cuentas.</h1>\n \n <pre>Busca y devuelve todas las cuentas que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todas las cuentas de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CuentaCobroDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/cities : Crea una cuenta de cobro.</h1>\n \n <pre>Cuerpo de petición: JSON {@link CuentaCobroDetailDTO}.\n \n Crea una nueva cuenta con la informacion que se recibe en el cuerpo \n de la petición y se regresa un objeto identico con un id auto-generado \n por la base de datos.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva cuenta .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe la cuenta.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CuentaCobroDetailDTO"
                        },
                        "description": "{@link CuentaCobroDetailDTO} - La cuenta que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CuentaCobroDetailDTO"
                        }
                    }
                }
            }
        },
        "/cuentascobro/{id}": {
            "get": {
                "description": "<h1>GET /api/cuentas/{id} : Obtener cuenta por id.</h1>\n \n <pre>Busca la cuenta con el id asociado recibido en la URL y la devuelve.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la cuenta correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una cuenta con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la cuenta que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CuentaCobroDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/cuentas/{id} : Actualizar cuenta con el id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link CuentaCobroDetailDTO}.\n \n Actualiza la cuenta con el id recibido en la URL con la informacion que se recibe en el cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la cuenta con el id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una cuenta con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la cuenta que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CuentaCobroDetailDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/CuentaCobroDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/cuentas/{id} : Borrar cuenta por id.</h1>\n \n <pre>Borra la cuenta con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina la cuenta correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una cuenta con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la cuenta que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/dias": {
            "get": {
                "description": "<h1>GET /api/dias : Obtener todos los dias.</h1>\n \n <pre>Busca y devuelve todos los dias que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todos los dias de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DiaDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/dias : Crear un dia.</h1>\n \n <pre>Cuerpo de petición: JSON {@link DiaDetailDTO}.\n \n Crea un nuevo dia con la informacion que se recibe en el cuerpo \n de la petición y se regresa un objeto identico con un id auto-generado \n por la base de datos.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó el nuevo dia .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe el dia.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiaDetailDTO"
                        },
                        "description": "{@link DiaDetailDTO} - El dia que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/DiaDetailDTO"
                        }
                    }
                }
            }
        },
        "/dias/{id}": {
            "get": {
                "description": "<h1>GET /api/dias/{id} : Obtener dia por id.</h1>\n \n <pre>Busca el dia con el id asociado recibido en la URL y la devuelve.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve el dia correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe un dia con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador del dia que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/DiaDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/dias/{id} : Actualizar dia con el id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link DiaDetailDTO}.\n \n Actualiza el dia con el id recibido en la URL con la informacion que se recibe en el cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza el dia con el id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe un dia con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador del dia que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiaDetailDTO"
                        },
                        "description": "{@link DiaDetailDTO} El dia que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/DiaDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/dias/{id} : Borrar dia por id.</h1>\n \n <pre>Borra el dia con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina el dia correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe un dia con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador del dia que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/dietas": {
            "get": {
                "description": "<h1>GET /api/dietas : Obtener todas las dietas.</h1>\n \n <pre>Busca y devuelve todas las dietas que existen en la\n aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todas las ciudades de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DietaTipoDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/cities : Crear una dieta.</h1>\n \n <pre>Cuerpo de petición: JSON {@link DietaTipoDetailDTO}.\n \n Crea una nueva dieta con la informacion que se recibe en el\n cuerpo de la petición y se regresa un objeto identico con un\n id auto-generado por la base de datos.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva dieta.\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe la ciudad.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DietaTipoDetailDTO"
                        },
                        "description": "{@link DietaTipoDetailDTO} - La dieta que se \n desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/DietaTipoDetailDTO"
                        }
                    }
                }
            }
        },
        "/dietas/{id}": {
            "get": {
                "description": "<h1>GET /api/dietas/{id} : Obtener dieta por id.</h1>\n \n <pre>Busca la dieta con el id asociado recibido en la URL y la\n devuelve.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la dieta correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una dieta con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la dieta que se esta buscando. Este\n debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/DietaTipoDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/dietas/{id} : Actualizar dieta con el id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link CityDetailDTO}.\n \n Actualiza la dieta con el id recibido en la URL con la\n informacion que se recibe en el cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la dieta con el id dado con la información\n enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una ciudad con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la dieta que se desea actualizar.\n Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DietaTipoDetailDTO"
                        },
                        "description": "{@link CityDetailDTO} La dieta que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/DietaTipoDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/dietas/{id} : Borrar dieta por id.</h1>\n \n <pre>Borra la dieta con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina la dieta correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una dieta con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la dieta que se desea borrar. Este\n debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/envios": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/facturas": {
            "get": {
                "description": "<h1>GET /api/facturas : Obtener todas las facturas.</h1>\n \n <pre>Busca y devuelve todas las facturas que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todas las facturas de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FacturaDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/facturas : Crear una factura.</h1>\n \n <pre>Cuerpo de petición: JSON {@link FacturaDetailDTO}.\n \n Crea una nueva factura con la informacion que se recibe en el cuerpo \n de la petición y se regresa un objeto identico con un id auto-generado \n por la base de datos.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva factura .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe la factura.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FacturaDetailDTO"
                        },
                        "description": "{@link FacturaDetailDTO} - La factura que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/FacturaDetailDTO"
                        }
                    }
                }
            }
        },
        "/facturas/{id}": {
            "get": {
                "description": "<h1>GET /api/facturas/{id} : Obtener factura por id.</h1>\n \n <pre>Busca la factura con el id asociado recibido en la URL y la devuelve.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la factura correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una factura con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la factura que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/FacturaDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/facturas/{id} : Actualizar factura con el id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link FacturaDetailDTO}.\n \n Actualiza la factura con el id recibido en la URL con la informacion que se recibe en el cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la factura con el id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una factura con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la factura que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FacturaDetailDTO"
                        },
                        "description": "{@link FacturaDetailDTO} La factura que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/FacturaDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/facturas/{id} : Borrar factura por id.</h1>\n \n <pre>Borra la factura con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina la factura correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una factura con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la factura que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/personas": {
            "get": {
                "description": "<h1>GET /api/personas : Obtener todas las personas</h1>\n \n <pre>Busca y devuelve todas las personas que existen en la\n aplicación.\n \n Códigos de respuesta:<br>\n <code style=\"color:mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todas las personas registradas.</code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PersonaDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST TODOLaRuta : Crear una persona.</h1>\n \n <pre>Cuerpo de petición: JSON {@link PersonaDetailDTO}.\n \n Crea una nueva persona (cliente/paciente) con la información que\n se recibe en el cuerpo de la petición y se devuelve un objeto\n idéntico con un id auto-generado por la base de datos.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó el nuevo cliente.\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precondition Failed: Esta persona ya está registrada.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PersonaDetailDTO"
                        },
                        "description": "{@link PersonaDetailDTO} - La persona que se \n quiere registrar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/PersonaDetailDTO"
                        }
                    }
                }
            }
        },
        "/personas/{id}": {
            "get": {
                "description": "<h1>GET /api/personas/{id} _ Obtener persona por id.</h1>\n \n <pre>Busca la persona con el id asociado recibido en la URL y la\n devuelve.\n \n Códigos de respuesta:<br>\n <code style=\"color:mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la persona correspondiente al id.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la persona que se está buscando. Este\n debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/PersonaDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/personas/{id} : Actualizar persona con el id dado.</h1>\n <pre> Cuerpo de petición: JSON {@link PersonaDetailDTO}.\n \n Actualiza la persona con el id recibido en la URL con la\n información que se recibe en el cuerpo de la petición.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la persona con el id dado con la información\n enviada como parámetro. Devuelve un objeto idéntico.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una persona con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la persona que se desea actualizar.\n Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PersonaDetailDTO"
                        },
                        "description": "{@link PersonaDetailDTO} La persona que se desea\n actualizar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/PersonaDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/personas/{id} : Borrar persona por id. </h1>\n \n <pre>Borra la persona con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina la persona con el id dado. </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una persona con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la persona que se desea borrar. Este\n debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/quejasyreclamos": {
            "get": {
                "description": "<h1>GET /api/quejasyreclamaos : Obtener todas las quejas y reclamos.</h1>\n \n <pre>Busca y devuelve todas las quejas y reclamos que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todas las quejas y reclamos de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QuejasyReclamosDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/quejasyreclamos : Crear una queja y reclamo.</h1>\n \n <pre>Cuerpo de petición: JSON {@link CityDetailDTO}.\n \n Crea una nueva calificacion con la informacion que se recibe en el cuerpo \n de la petición y se regresa un objeto identico.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva queja y reclamo .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe la queja y reclammo.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QuejasyReclamosDetailDTO"
                        },
                        "description": "{@link quejayreclamoDetailDTO} - La queja y reclamo que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/QuejasyReclamosDetailDTO"
                        }
                    }
                }
            }
        },
        "/quejasyreclamos/{id}": {
            "get": {
                "description": "<h1>GET /api/quejasyreclamos/{id} : Obtener queja y reclamo por id.</h1>\n \n <pre>Busca la queja y reclamo con el id asociado recibido en la URL y la devuelve.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la queja y reclamo correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una queja y reclamo con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la queja y reclamo que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/QuejasyReclamosDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/quejasyreclamos/{id} : Actualizar queja y reclamo con el id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link QuejasyReclamosDetailDTO}.\n \n Actualiza la queja con el id recibido en la URL con la informacion que se recibe en el cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la queja con el id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una queja con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la queja que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/QuejasyReclamosDetailDTO"
                        },
                        "description": "{@link QuejassyReclamosDetailDTO} La queja que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/QuejasyReclamosDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/quejasyreclamos/{id} : Borrar ciudad por id.</h1>\n \n <pre>Borra la queja con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina la queja correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una queja con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la queja que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        },
        "/semanas": {
            "get": {
                "description": "<h1>GET /api/semanas : Obtener todas las semanas.</h1>\n \n <pre>Busca y devuelve todas las semanas que existen en la aplicacion.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve todas las semanas de la aplicacion.</code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SemanaDetailDTO"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "<h1>POST /api/semanas : Crear una semana.</h1>\n \n <pre>Cuerpo de petición: JSON {@link SemanaDetailDTO}.\n \n Crea una nueva semana con la informacion que se recibe en el cuerpo \n de la petición y se regresa un objeto identico con un id auto-generado \n por la base de datos.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Creó la nueva semana .\n </code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 412 Precodition Failed: Ya existe la semana.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SemanaDetailDTO"
                        },
                        "description": "{@link SemanaDetailDTO} - La semana que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/SemanaDetailDTO"
                        }
                    }
                }
            }
        },
        "/semanas/{id}": {
            "get": {
                "description": "<h1>GET /api/semanas/{id} : Obtener semana por id.</h1>\n \n <pre>Busca la semana con el id asociado recibido en la URL y la devuelve.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Devuelve la semana correspondiente al id.\n </code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found No existe una semana con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la semana que se esta buscando. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/SemanaDetailDTO"
                        }
                    }
                }
            },
            "put": {
                "description": "<h1>PUT /api/semanas/{id} : Actualizar semana con el id dado.</h1>\n <pre>Cuerpo de petición: JSON {@link SemanaDetailDTO}.\n \n Actualiza la semana con el id recibido en la URL con la informacion que se recibe en el cuerpo de la petición.\n \n Codigos de respuesta:\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Actualiza la semana con el id dado con la información enviada como parámetro. Retorna un objeto identico.</code> \n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una semana con el id dado.\n </code> \n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la semana que se desea actualizar.Este debe ser una cadena de dígitos."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SemanaDetailDTO"
                        },
                        "description": "{@link SemanaDetailDTO} La semana que se desea guardar."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                        },
                        "schema": {
                            "$ref": "#/definitions/SemanaDetailDTO"
                        }
                    }
                }
            },
            "delete": {
                "description": "<h1>DELETE /api/semanas/{id} : Borrar semana por id.</h1>\n \n <pre>Borra la semana con el id asociado recibido en la URL.\n \n Códigos de respuesta:<br>\n <code style=\"color: mediumseagreen; background-color: #eaffe0;\">\n 200 OK Elimina la semana correspondiente al id dado.</code>\n <code style=\"color: #c7254e; background-color: #f9f2f4;\">\n 404 Not Found. No existe una semana con el id dado.\n </code>\n </pre>",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "Identificador de la semana que se desea borrar. Este debe ser una cadena de dígitos."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "headers": {
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "CalificacionDTO": {
            "properties": {
                "puntuacion": {
                    "type": "number"
                }
            }
        },
        "CalificacionDetailDTO": {
            "properties": {
                "puntuacion": {
                    "type": "number"
                }
            }
        },
        "CasoExitoDetailDTO": {
            "properties": {
                "dieta": {
                    "$ref": "#/definitions/DietaTipoDTO"
                }
            }
        },
        "CityDetailDTO": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "pais": {
                    "type": "string"
                },
                "zipcode": {
                    "type": "string"
                }
            }
        },
        "CocinaDetailDTO": {
            "properties": {
                "capacidad": {
                    "type": "string"
                },
                "dietas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DietaTipoDTO"
                    }
                },
                "ubicacion": {
                    "type": "string"
                }
            }
        },
        "ComidaDTO": {
            "properties": {
                "TIPO": {
                    "type": "string"
                },
                "alimentos": {
                    "type": "string"
                },
                "cantidad": {
                    "type": "integer"
                },
                "direccion": {
                    "type": "string"
                },
                "tipo": {
                    "type": "string"
                }
            }
        },
        "CuentaCobroDetailDTO": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "pago": {
                    "$ref": "#/definitions/PagoDTO"
                },
                "valorAPagar": {
                    "type": "number"
                }
            }
        },
        "DiaDTO": {
            "properties": {
                "fecha": {
                    "type": "string"
                },
                "recomendacion": {
                    "type": "string"
                },
                "senEnvia": {
                    "type": "boolean"
                }
            }
        },
        "DiaDetailDTO": {
            "properties": {
                "comidas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ComidaDTO"
                    }
                },
                "fecha": {
                    "type": "string"
                },
                "recomendacion": {
                    "type": "string"
                },
                "senEnvia": {
                    "type": "boolean"
                }
            }
        },
        "DietaTipoDTO": {
            "properties": {
                "descripcion": {
                    "type": "string"
                },
                "objetivo": {
                    "type": "string"
                }
            }
        },
        "DietaTipoDetailDTO": {
            "properties": {
                "descripcion": {
                    "type": "string"
                },
                "objetivo": {
                    "type": "string"
                }
            }
        },
        "FacturaDetailDTO": {
            "properties": {
                "cantidadDeProductos": {
                    "type": "integer"
                },
                "numeroFactura": {
                    "type": "integer"
                },
                "persona": {
                    "$ref": "#/definitions/PersonaDTO"
                },
                "semana": {
                    "$ref": "#/definitions/SemanaDTO"
                }
            }
        },
        "MedioPagoDTO": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "medioPagoActual": {
                    "type": "string"
                }
            }
        },
        "PagoDTO": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "montoFinal": {
                    "type": "number"
                },
                "montoIncial": {
                    "type": "number"
                }
            }
        },
        "PagoDetailDTO": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "medioPago": {
                    "$ref": "#/definitions/MedioPagoDTO"
                },
                "montoFinal": {
                    "type": "number"
                },
                "montoIncial": {
                    "type": "number"
                }
            }
        },
        "PersonaDTO": {
            "properties": {
                "apellido": {
                    "type": "string"
                },
                "correo": {
                    "type": "string"
                },
                "direccion": {
                    "type": "string"
                },
                "edad": {
                    "type": "integer"
                },
                "identificacion": {
                    "type": "string"
                },
                "nombre": {
                    "type": "string"
                },
                "subscrito": {
                    "type": "boolean"
                }
            }
        },
        "PersonaDetailDTO": {
            "properties": {
                "apellido": {
                    "type": "string"
                },
                "calificacion": {
                    "$ref": "#/definitions/CalificacionDTO"
                },
                "correo": {
                    "type": "string"
                },
                "dieta": {
                    "$ref": "#/definitions/DietaTipoDTO"
                },
                "direccion": {
                    "type": "string"
                },
                "edad": {
                    "type": "integer"
                },
                "identificacion": {
                    "type": "string"
                },
                "nombre": {
                    "type": "string"
                },
                "subscrito": {
                    "type": "boolean"
                }
            }
        },
        "QuejasyReclamosDetailDTO": {
            "properties": {
                "asunto": {
                    "type": "string"
                },
                "comentario": {
                    "type": "string"
                }
            }
        },
        "SemanaDTO": {
            "properties": {
                "fechaLunes": {
                    "type": "string"
                }
            }
        },
        "SemanaDetailDTO": {
            "properties": {
                "fechaLunes": {
                    "type": "string"
                },
                "listaDias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DiaDTO"
                    }
                }
            }
        }
    }
}